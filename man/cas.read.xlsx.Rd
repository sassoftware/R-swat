% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_write.R
\name{cas.read.xlsx}
\alias{cas.read.xlsx}
\title{Read an XLSX File and Upload to a CAS Table}
\usage{
cas.read.xlsx(
  conn,
  file,
  sheetIndex = 1,
  sheetName = NULL,
  rowIndex = NULL,
  startRow = NULL,
  endRow = NULL,
  colIndex = NULL,
  as.data.frame = TRUE,
  header = TRUE,
  colClasses = NA,
  keepFormulas = FALSE,
  encoding = "unknown",
  casOut = list(name = "", replace = FALSE)
)
}
\arguments{
\item{conn}{An instance of a CAS object that represents
a connection and CAS session.}

\item{file}{An \code{character} string that 
specifies the filename for the XLSX file.
This value is passed to \code{read.xslx}.}

\item{sheetIndex}{An optional \code{numeric} that specifies
the sheet in the workbook. This value is passed to
\code{read.xlsx}.}

\item{sheetName}{An optional \code{character} string that 
specifies the sheet name in the workbook. This value is
passed to \code{read.xlsx}.}

\item{rowIndex}{An optional \code{numeric} vector that
specifies the rows to read from the workbook. By default,
all rows are read. This value is passed to \code{read.xlsx}.}

\item{startRow}{An optional \code{numeric} that specifies
the first row of the workbook to read. This value is
ignored of rowIndex is specified. This value is passed to
\code{read.xlsx}.}

\item{endRow}{An optional \code{numeric} that specifies the
last row of the workbook to read. This value is ignored if
rowIndex is specified. This value is passed to \code{read.xlsx}.}

\item{colIndex}{An optional \code{numeric} vector that specifies
the variables to read from the workbook. By default,
all variables are read. This value is passed to \code{read.xlsx}.}

\item{as.data.frame}{An optional \code{logical} value that 
specifies whether the data should be coerced into a data frame.
This value is passed to \code{read.xlsx}.}

\item{header}{An optional \code{logical} that specifies
whether the first line of the file contains variable
names.}

\item{colClasses}{An optional \code{character} vector that
specifies the classes for the columns. This value is passed
to \code{read.xlsx}.}

\item{keepFormulas}{An optional \code{logical} value that specifies
whether Excel formulas are included as text or if they are 
evaluated and the result is read as data. This value is passed
to \code{read.xlsx}.}

\item{encoding}{An optional \code{character} string that specifies
the encoding for character data. This value is passed to 
\code{read.xlsx}.}

\item{casOut}{An optional \code{character} or list. If
you specify a string, then the string is used as the
in-memory table name. A list can be used to specify
properties for the in-memory table as follows:
\describe{
  \item{\code{name}}{An optional \code{character} that 
    specifies the name for the in-memory table. By 
    default, the name of the data frame is used.}
  \item{\code{caslib}}{An optional \code{character} that
    specifies the caslib. Specify this parameter to
    override the active caslib.}
  \item{\code{label}}{An optional \code{character} that
    specifies a descriptive label for the data.}
  \item{\code{replace}}{An optional \code{logical}. When
    set to TRUE, you can replace an existing in-memory
    table with the same name in the same caslib. The 
    default value is FALSE.}
  \item{\code{promote}}{An optional \code{logical}. When
    set to TRUE, the in-memory table has global scope and
    can be available to other CAS sessions (subject to
    access controls). The default value is FALSE and
    the in-memory table has session scope so that it is
    accessible with the session that uploaded the table
    only. Session-scope tables are ideal for data analysis.
    Global-scope tables are better suited for reporting.}
  \item{\code{replication}}{An optional \code{numeric} that
    specifies the number of redundant copies of in-memory
    blocks. This parameter applies to distributed servers
    only. The default value is 1.}
 }}
}
\value{
\code{\link{CASTable}}
}
\description{
This function is a convenience wrapper for
the \R \code{read.xlsx} and \code{as.casTable} functions.
After reading the file that is accessible to the \R
client, it is uploaded to an in-memory table in 
CAS (the server).
}
\examples{
\dontrun{
myCasTable <- cas.read.xlsx(s, file="/path/to/data_out.xlsx", 
  sheetIndex = 1, 
  casOut=list(name="mycastable", replace=TRUE))
}
}
\seealso{
Other functions for loading in-memory data: 
\code{\link{cas.read.csv}()},
\code{\link{cas.read.jmp}()},
\code{\link{cas.read.sas7bdat}()},
\code{\link{cas.read.table}()},
\code{\link{cas.readRDS}()}
}
\concept{functions for loading in-memory data}
% Copyright SAS Institute
